<?php
// $Id: ooyala.module,v 1.23 2010/08/11 21:09:32 quicksketch Exp $

/**
 * @file
 * Ooyala module provides integration with the Ooyala video service.
 *
 * Ooyala integrates with CCK to provide a field, widget, and formatters to
 * upload video directly to the Ooyala service and display it.
 */

/**
 * Implementation of hook_menu().
 */
function ooyala_menu() {
  $items['admin/settings/ooyala'] = array(
    'title' => 'Ooyala settings',
    'description' => 'Configure the global options for Ooyala fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ooyala_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['ooyala/js'] = array(
    'page callback' => 'ooyala_upload_js',
    'access arguments' => array('upload ooyala videos'),
    'page arguments' => array(2),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['ooyala/update_metadata'] = array(
    'page callback' => 'ooyala_upload_metadata',
    'access arguments' => array('upload ooyala videos'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['ooyala/thumbnail'] = array(
    'page callback' => 'ooyala_refresh_thumbnail',
    'access arguments' => array('upload ooyala videos'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['ooyala/ping'] = array(
    'page callback' => 'ooyala_ping',
    'access arguments' => array('access content'),
    'file' => 'includes/ooyala.pages.inc',
    'type' => MENU_CALLBACK,
  );

  if (module_exists('thickbox')) {
    $items['ooyalavideo'] = array(
      'title' => 'Video',
      'page callback' => 'ooyala_thickbox_player_page',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ooyala_perm() {
  return array('upload ooyala videos');
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 */
function ooyala_elements() {
  return array(
    'ooyala_upload' => array(
      '#input' => TRUE,
      '#columns' => array('value'),
      '#delta' => 0,
      '#process' => array('ooyala_upload_process'),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function ooyala_theme() {
  $themes = array(
    'ooyala_formatter_ooyala_video' => array(
      'arguments' => array(
        'element' => NULL
      ),
    ),
    'ooyala_player' => array(
      'arguments' => array(
        'embedcode' => NULL,
        'player_id' => NULL,
        'width' => NULL,
        'height' => NULL,
      ),
    ),
    'ooyala_thickbox_player' => array(
      'arguments' => array(
        'embedcode' => NULL,
      ),
      'template' => 'templates/ooyala-thickbox-player',
    ),
    'ooyala_formatter_ooyala_thumbnail' => array(
      'arguments' => array(
        'element' => NULL,
        'preset' => NULL,
        'link' => NULL,
      ),
    ),
    'ooyala_formatter_ooyala_thickbox' => array(
      'arguments' => array(
        'element' => NULL,
        'imagecache_preset' => NULL, 
      ),
    ),
    'ooyala_upload' => array(
      'arguments' => array('element' => NULL),
    ),
    'ooyala_upload_preview' => array(
      'arguments' => array('embedcode' => NULL),
    ),
    'ooyala_thumbnail' => array(
      'arguments' => array(
        'src' => NULL,
        'preset' => NULL,
        'link_href' => NULL,
        'link_attributes' => array(),
        'image_attributes' => array(),
        'get_size' => FALSE,
      ),
    ),
  );

  // This was also taken from Thickbox.
  if (module_exists('imagecache')) {
    foreach (imagecache_presets() as $preset) {
      $themes['ooyala_formatter_'. $preset['presetname'] .'|ooyala_imagecache'] = array(
        'function' => 'theme_ooyala_format',
        'arguments' => array('element' => NULL),
      );
      $themes['ooyala_formatter_'. $preset['presetname'] .'|ooyala_linked_imagecache'] = array(
        'function' => 'theme_ooyala_format',
        'arguments' => array('element' => NULL),
      );
      if (module_exists('thickbox')) {
        $themes['ooyala_formatter_'. $preset['presetname'] .'|ooyala_thickbox'] = array(
          'function' => 'theme_ooyala_format',
          'arguments' => array('element' => NULL),
        );
      }
    }
  }

  return $themes;
}

/**
 * Implementation of hook_cron().
 */
function ooyala_cron() {
  // first we will check for the list of pending thumbnails
  $thumbnails_to_get = variable_get('ooyala_pending_thumbnails', array());

  foreach ($thumbnails_to_get as $key => $embedcode) {
    if (ooyala_api_fetch_image($embedcode)) {
      unset($thumbnails_to_get[$key]);
    }
    else {
      continue; // Just go on... we won't process it this time.
    }
  }

  variable_set('ooyala_pending_thumbnails', $thumbnails_to_get);
}

/**
 * Implementation of hook_nodeapi().
 */
function ooyala_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      // Make a record of Ooyala fields in this node (if any).
      $additions = array();
      if ($ooyala_field_names = ooyala_field_names($node->type)) {
        $additions['ooyala_field_names'] = $ooyala_field_names;
      }
      return $additions;
    case 'view':
      // If the auto-publish feature is enabled, display a message on
      // unpublished nodes on view.
      if ($page && $node->status == 0 && isset($node->ooyala_field_names) && variable_get('ooyala_autopublish', 0)) {
        $embedcodes = array();
        foreach ($node->ooyala_field_names as $field_name) {
          foreach ($node->{$field_name} as $delta => $item) {
            if (!empty($item['value'])) {
              $embedcodes[] = $item['value'];
            }
          }
        }
        if ($embedcodes) {
          $videos = ooyala_api_video_load_multiple($embedcodes);
          $videos_processing = FALSE;
          foreach ($videos as $video) {
            if ($video['status'] == 'processing') {
              $videos_processing = TRUE;
            }
          }
          if ($videos_processing) {
            drupal_set_message(t('The video for this content is being processed. When the processing is complete this content will become publicly visible.'));
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function ooyala_form_alter(&$form, &$form_state, $form_id) {
  // Disable multiple values.
  if ($form_id == 'content_field_edit_form' && isset($form['#field']) && $form['#field']['widget']['type'] == 'ooyala_upload') {
    $form['field']['multiple']['#type'] = 'value';
  }
}

/**
 * Implementation of hook_field_info().
 */
function ooyala_field_info() {
  return array(
    'ooyala' => array(
      'label' => t('Ooyala'),
      'description' => t('Store an Ooyala video ID.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function ooyala_field_settings($op, $field) {
  switch ($op) {
    case 'database columns':
      $columns['value'] = array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'sortable' => FALSE,
        'views' => TRUE,
      );
      return $columns;
  }
}

/**
 * Implementation of hook_field().
 */
function ooyala_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      return $items;

    case 'sanitize':
      foreach ($items as $delta => $item) {
        $text = check_plain($item['value']);
        $items[$delta]['safe'] = $text;
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function ooyala_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function ooyala_field_formatter_info() {

  $formatters = array(
    'ooyala_video' => array(
      'label' => t('Ooyala video'),
      'field types' => array('ooyala'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
    'ooyala_thumbnail' => array(
      'label' => t('Ooyala thumbnail'),
      'field types' => array('ooyala'),
      'multiple values' => CONTENT_HANDLE_MODULE,
    ),
  );

  if (module_exists('thickbox')) {
    $formatters['ooyala_thickbox'] = array(
      'label' => t('Ooyala thumbnail to thickbox'),
      'field types' => array('ooyala'),
    );
  }

  // This was taken from the Thickbox module.
  if (module_exists('imagecache')) {
    foreach (imagecache_presets() as $preset) {
      $formatters[$preset['presetname'] .'|ooyala_imagecache'] = array(
        'label' => t('Ooyala thumbnail: @preset image', array('@preset' => $preset['presetname'])),
        'field types' => array('ooyala'),
      );
      $formatters[$preset['presetname'] .'|ooyala_linked_imagecache'] = array(
        'label' => t('Ooyala thumbnail: @preset image linked to node', array('@preset' => $preset['presetname'])),
        'field types' => array('ooyala'),
      );
      if (module_exists('thickbox')) {
        $formatters[$preset['presetname'] .'|ooyala_thickbox'] = array(
          'label' => t('Ooyala thumbnail: @preset image to thickbox', array('@preset' => $preset['presetname'])),
          'field types' => array('ooyala'),
        );
      }
    }
  }
  return $formatters;
}

/**
 * Implementation of hook_widget_info().
 */
function ooyala_widget_info() {

  return array(
    'ooyala_upload' => array(
      'label' => t('Ooyala upload'),
      'field types' => array('ooyala'),
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_NONE,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function ooyala_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      if (module_exists('taxonomy')){
        $vocs = taxonomy_get_vocabularies();
        foreach($vocs as $voc) {
          $vocabularies[$voc->vid]=$voc->name;
        }
        $form['ooyala_tags'] = array(
          '#type' => 'select',
          '#multiple' => true,
          '#title' => 'Vocabulary tags to send',
          '#description' => t('Tags from these vocabularies will be sent to ooyala to help classify the videos in the backlot'),
          '#options' => $vocabularies,
          '#default_value' => $widget['ooyala_tags'],
        );
      }
      $return = $form;
      break;
    case 'save':
      $return = array('ooyala_tags');
      break;
  }

  return $return;
}

/**
 * Implementation of hook_widget().
 */
function ooyala_widget(&$form, &$form_state, $field, $items, $delta = NULL) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => !empty($items) ? $items : array(),
  );
  return $element;
}

/**
 * Implementation of hook_views_api().
 */
function ooyala_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'ooyala') . '/includes',
  );
}

/**
 * Element #process function for the "ooyala_upload" field.
 */
function ooyala_upload_process($element, $edit, &$form_state, $form) {
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];

  $element['#theme'] = 'ooyala_upload';
  $element['#field'] = $field;
  $element['#ooyala_api_available'] = ooyala_api_available();
  $element['#ooyala_video'] = isset($element['#value'][0]['value']) ? ooyala_api_video_load($element['#value'][0]['value']) : array();

  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#default_value' => isset($element['#value'][0]['value']) ? $element['#value'][0]['value'] : FALSE,
  );

  // Set #element_validate in a way that it will not wipe out other
  // validation functions already set by other modules.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }

  return $element;
}

/**
 * Given an Ooyala embedcode, load the nodes that contains it (if any).
 */
function ooyala_load_nodes($embedcode) {
  $nodes = array();

  // Find any Ooyala fields.
  foreach (node_get_types() as $node_type) {

    // Load any content type specific instances of this field.
    foreach (ooyala_field_names($node_type->type) as $field_name) {
      $field_instance = content_fields($field_name, $node_type->type);
      // Match any rows of the latest revision that contain this embedcode.
      $db_info = content_database_info($field_instance);
      $table = $db_info['table'];
      $column = $db_info['columns']['value']['column'];
      $result = db_query("SELECT n.nid FROM {%s} o INNER JOIN {node} n ON o.vid = n.vid WHERE $column = '%s'", $table, $embedcode);
      while ($row = db_fetch_object($result)) {
        $nodes[$row->nid] = node_load($row->nid);
      }
    }
  }

  return $nodes;
}

/**
 * A lightweight approach to publishing a node.
 */
function ooyala_publish_node($nid) {
  return db_query("UPDATE {node} SET status = 1 WHERE nid = %d", $nid);
}

/**
 * Find all the Ooyala fields within a particular node type.
 */
function ooyala_field_names($type_name) {
  $content_type = content_types($type_name);
  $field_names = array();

  foreach ($content_type['fields'] as $field) {
    if ($field['type'] == 'ooyala') {
      $field_names[] = $field['field_name'];
    }
  }

  return $field_names;
}

/**
 * Check if Ooyala APIs are available.
 */
function ooyala_api_available() {
  static $online;
  if (!isset($online)) {
    $response = drupal_http_request("http://api.ooyala.com/partner/query");
    $online = $response->code == 200;
  }
  return $online;
}

/**
 * Load an individual video from Ooyala.
 */
function ooyala_api_video_load($embedcode) {
  $videos = ooyala_api_video_load_multiple(array($embedcode));
  return isset($videos[$embedcode]) ? $videos[$embedcode] : FALSE;
}

/**
 * Load multiple videos from Ooyala in a single query.
 */
function ooyala_api_video_load_multiple($embedcodes, $reset = FALSE) {
  static $videos = array();

  if ($reset) {
    $videos = array();
  }

  // Build a list of videos to query that we do not yet have retreived.
  $query_embedcodes = $embedcodes;
  foreach ($embedcodes as $key => $embedcode) {
    if (!isset($videos[$embedcode])) {
      $query_embedcodes[] = $embedcode;
    }
  }

  // Query for any new videos that need to be retreived.
  if (!empty($query_embedcodes)) {
    module_load_include('inc', 'ooyala', 'includes/ooyala.partner_api');

    $ooyala_api = new OoyalaPartnerAPI(variable_get('ooyala_global_secret', ''), variable_get('ooyala_global_pcode', ''));
    $request = $ooyala_api->signed_params(
      array(
        'embedCode' => implode(',', $query_embedcodes),
        'expires' => time() + 30,
      )
    );
    $response = drupal_http_request("http://api.ooyala.com/partner/query?$request");

    // Default each embedcode to FALSE in case it is not retreived.
    foreach ($query_embedcodes as $embedcode) {
      $videos[$embedcode] = FALSE;
    }

    // Populate all the video entries with the results.
    if ($response->data && $xmldoc = @simplexml_load_string($response->data)) {
      foreach ($xmldoc->children() as $result) {
        $video = (array) $result;
        $videos[$video['embedCode']] = $video;
      }
    }
  }

  $return = array();
  foreach ($embedcodes as $embedcode) {
    $return[$embedcode] = $videos[$embedcode];
  }

  return $return;
}

/**
 * Load an individual property of a video from Ooyala.
 */
function ooyala_api_video_property($embedcode, $property) {
  $video = ooyala_api_video_load($embedcode);
  return isset($video[$property]) ? $video[$property] : FALSE;
}

/**
 * Fetch and save a video thumbnail from the Ooyala server.
 */
function ooyala_api_fetch_image($embedcode) {
  module_load_include('inc', 'ooyala', 'includes/ooyala.partner_api');
  $ooyala_api = new OoyalaPartnerAPI(variable_get('ooyala_global_secret', ''), variable_get('ooyala_global_pcode', ''));
  $thumb_path = FALSE;

  $request = $ooyala_api->signed_params(
    array(
      'embedCode' => $embedcode,
      'range' => '0-1',
      'resolution' => '1024x768',
      'expires' => time() + 30,
    )
  );
  $response = drupal_http_request("http://api.ooyala.com/partner/thumbnails?$request");
  if ($response->data && $xmldoc = @simplexml_load_string($response->data)) {
    $thumb_url = (string) $xmldoc->promoThumbnail[0] ; // we just want the big thumbnail. 
    $thumb_file = drupal_http_request($thumb_url);
    $thumb_path = ooyala_get_thumbnail_url($embedcode, NULL, TRUE);
    if ($fp = @fopen($thumb_path, 'w+')) {
      fwrite($fp, $thumb_file->data);
      fclose($fp);
    }
    else {
      ooyala_message('The file @path could not be written, check the permissions on the directory and make sure it is writable.', array('@path' => $thumb_path), WATCHDOG_ERROR);
      $thumb_path = FALSE;
    }
  }
  elseif ($response->code == 200) {
    // The most common situation for a 200 but no XML string is an error such
    // as "unknown content" from Ooyala. Errors are returned as plain strings.
    $nodes = ooyala_load_nodes($embedcode);
    $node_link = theme('placeholder', t('none'));
    $node_links = array();
    foreach ($nodes as $node) {
      $node_links[] = l(check_plain($node->title), 'node/' . $node->nid);
    }
    if (count($node_links) > 1) {
      $node_link = theme('item_list', $node_links);
    }
    elseif (count($node_links) == 1) {
      $node_link = $node_links[0];
    }
    ooyala_message('The thumbnail for the video "@embedcode" could not be retrieved from Ooyala. Ooyala reported the error <code>@error</code>. This video is in use by the following nodes: !node_links', array('@embedcode' => $embedcode, '@error' => $response->data, '!node_links' => $node_link), 'error');
  }
  else {
    ooyala_message('The thumbnail for the video "@embedcode" could not be retrieved from Ooyala because the service returned an HTTP error @code.', array('@embedcode' => $embedcode, '@code' => $response->code), 'error');
  }

  return $thumb_path;
}

/**
 * Report an error to the user.
 */
function ooyala_message($message, $variables = array(), $type = 'status') {
  // Post a message if verbose reporting is enabled.
  if (variable_get('ooyala_reporting_level', 1)) {
    drupal_set_message(t($message, $variables), $type);
  }
  // Log errors and warnings to watchdog.
  if ($type == 'error' || $type == 'warning') {
    watchdog('ooyala', $message, $variables, $type == 'error' ? WATCHDOG_ERROR : WATCHDOG_WARNING);
  }
}

/**
 * A public API function used to output an Ooyala player.
 */
function ooyala_player($embedcode, $player_id = NULL, $width = NULL, $height = NULL,$autoplay = FALSE) {
  return theme('ooyala_player', $embedcode, $player_id, $width, $height, $autoplay);
}

/**
 * Theme function to output an Ooyala video player.
 */
function theme_ooyala_player($embedcode, $player_id = NULL, $width = NULL, $height = NULL, $autoplay = FALSE) {
  static $js_added;

  if (!isset($js_added)) {
    drupal_add_js(drupal_get_path('module', 'ooyala') . '/ooyala_player.js');
  }

  if (empty($width)) {
    $width = variable_get('ooyala_video_width', 400);
  }
  if (empty($height)) {
    $height = variable_Get('ooyala_video_height', 300);
  }

  $player_id = isset($player_id) ? $player_id : 'ooyala_player';

  return sprintf('<script src="http://www.ooyala.com/player.js?playerId=' . $player_id . '&callback=receiveOoyalaEvent&autoplay=%d&width=%d&height=%d&embedCode=%s"></script>', $autoplay, $width, $height, $embedcode );
}

/**
 * Theme the "ooyala_upload" element.
 */
function theme_ooyala_upload($element) {
  static $js_added;

  if (!isset($js_added)) {
    drupal_add_css(drupal_get_path('module', 'ooyala') . '/ooyala.css');
    drupal_add_js(drupal_get_path('module', 'ooyala') . '/ooyala_upload.js');
    drupal_add_js(array(
      'ooyalaUploadUrl' => url('ooyala/js/' . $element['#field']['field_name']),
      'ooyalaRefreshUrl' => url('ooyala/thumbnail', array('query' => 'token=' . drupal_get_token())),
    ), 'setting');
    $js_added = TRUE;
  }

  $node_type = node_get_types('type', $element['#field']['type_name']);
  $status = empty($element['#ooyala_video']) ? 'unknown' : $element['#ooyala_video']['status'];
  $online = $element['#ooyala_api_available'];

  if ($online) {
    $upload_button = '<script src="http://www.ooyala.com/partner/uploadButton?width=100&height=20&label=' . t('Browse') . '""></script>';
    $submit_button = '<input type="button" class="form-submit" value="' . t('Upload') .'" id="ooyala-upload-button" disabled="disabled" />';
    $initial_message = t('Note that you must enter a @title value for this content before selecting a file.', array('@title' => $node_type->title_label));
    $element['value']['#field_suffix'] = $upload_button . $submit_button;

    $refresh_link = '<div class="ooyala-refresh"><a href="#" class="ooyala-refresh">' . t('Preview/refresh thumbnail') . '</a></div>';
  }
  else {
    $initial_message = '<em>' . t('Uploading is currently not available because the Ooyala service could not be reached.') . '</em>';
    $refresh_link = '';
  }
  $element['value']['#size'] = '40';
  $element['value']['#description'] = $element['value']['#description'] . '<div id="ooyala-message">' . $initial_message . '</div>' . $refresh_link;
  $element['value']['#attributes']['class'] = 'ooyala-embed-code-input';

  $output = '';
  $output .= '<div class="ooyala-field clear-block">';
  $output .= '<div class="ooyala-preview' . ($element['value']['#value'] ? '' : ' ooyala-preview-hidden') . '">';
  $output .= theme('ooyala_upload_preview', $element['value']['#value']);
  $output .= '</div>';
  $output .= '<div class="ooyala-button-container">';
  $output .= drupal_render($element['value']);
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Theme the preview thumbnail on the node form.
 */
function theme_ooyala_upload_preview($embedcode = NULL) {
  if (isset($embedcode)) {
    $path = ooyala_get_thumbnail_url($embedcode, NULL, TRUE);
    if (is_file($path)) {
      $output = theme('ooyala_thumbnail', $embedcode, NULL, NULL, NULL, array('width' => 150), FALSE);
    }
  }

  if (!isset($output)) {
    $output = '<div class="ooyala-preview-placeholder">' . t('No Preview Available') . '</div>';
  }

  return $output;
}

/**
 * Universal theme function for outputting ImageCache thumbnails.
 */
function theme_ooyala_format($element) {
  // check if the formatter refers to an imagecache preset
  $formatter = explode('|', $element['#formatter']);
  if ($formatter[1] ) {
    $preset = $formatter[0];
  }

  switch ($formatter[1]) {
    case 'ooyala_imagecache':
      $return = theme('ooyala_thumbnail', $element['#item']['value'], $preset);
      break;
    case 'ooyala_linked_imagecache':
      $return = theme('ooyala_thumbnail', $element['#item']['value'], $preset, 'node/' . $element['#node']->nid);
      break;
    case 'ooyala_thickbox':
      $return = theme('ooyala_formatter_ooyala_thickbox', $element, $preset);
      break;
    default:
      $return = '<!-- Appropriate formatter not found. -->';
      break;
  }
  return $return;
}

/**
 * Theme a textfield as a Ooyala video.
 */
function theme_ooyala_formatter_ooyala_video($element) {
  $values = array();

  $item = $element;

  foreach (element_children($element) as $key) {
    unset($item[$key]);

    $item['#item'] = $element[$key]['#item'];
    $value = ($allowed = _text_allowed_values($item)) ? $allowed : $item['#item']['safe'];
    if ($value) {
      $values[] = $value;
    }
  }

  $player_id = $element['#field_name'] . '_ooyala_player';

  // TODO: Make this formatter work on multiple values.
  return count($values) ? theme('ooyala_player', implode($values), $player_id) : '';
}

/**
 * Theme function to output the "ooyala_thumbnail" formatter.
 */
function theme_ooyala_formatter_ooyala_thumbnail($element) {
  $output = '';
  foreach (element_children($element) as $key) {
    $item = $element[$key];
    if ($item['#item']['value']) {
      $output .= theme('ooyala_thumbnail', $item['#item']['value']);
    }
  }

  return $output;
}

/**
 * Theme function to output the "ooyala_thickbox" formatter.
 */
function theme_ooyala_formatter_ooyala_thickbox($element, $preset = NULL) {
  $link_url = url('ooyalavideo/' . $element['#item']['value'], array('absolute' => TRUE,'query' => array(
    'KeepThis' => 'true',
    'TB_iframe' => 'true',
    'width' => variable_get('ooyala_thickbox_width', 500),
    'height' => variable_get('ooyala_thickbox_height', 400),
  )));

  $return = theme('ooyala_thumbnail', $element['#item']['value'], $preset, $link_url, array('class' => 'thickbox'));

  return $return;
}

/**
 * Themed output for an Ooyala thumbnail.
 */
function theme_ooyala_thumbnail($embedcode, $preset = NULL, $link_href = NULL, $link_attributes = array(), $image_attributes = array(), $get_size = TRUE) {
  $src = ooyala_get_thumbnail_url($embedcode, NULL, TRUE);

  // Retrieve the alt and title variables to be passed to other theme functions.
  $image_attributes += array('alt' => '', 'title' => '');
  $alt = $image_attributes['alt'];
  $title = $image_attributes['title'];
  unset($image_attributes['alt'], $image_attributes['title']);

  // Generate the img tag.
  if (isset($preset)) {
    $output = theme('imagecache', $preset, $src, $alt, $title, $image_attributes, $get_size);
  }
  else {
    $output = theme('image', $src, $alt, $title, $image_attributes, $get_size);
  }

  // Wrap if needed in our link.
  if ($link_href) {
    $options = array(
      'html' => TRUE,
      'attributes' => $link_attributes,
    );
    $output = l($output, $link_href, $options);
  }

  return '<div class="ooyala-thumbnail">' . $output .'</div>';
}

/**
 * Preprocess function for ooyala-thickbox-player.tpl.php.
 */
function template_preprocess_ooyala_thickbox_player(&$variables) {
  $variables['playercode'] = theme('ooyala_player', $variables['embedcode'], $variables['width'], $variables['height'], variable_get('ooyala_thickbox_autoplay',true) );
}

/**
 * Preprocess function for ooyala-sharedplayer-view.tpl.php.
 */
function template_preprocess_ooyala_sharedplayer_view(&$vars) {
  $view = $vars['view'];
  $vars['player_id'] = 'ooyalaplayer-'. $view->name .'-'. $view->current_display;  
  /* get the alias for the embed code field */
  /* i know this is not a nice var name, but it's better than $f_ckthatsalongpathjusttogetthealiasofthefield!! FIXME*/
  $pheww = $view->display[$view->current_display]->handler->handlers['field'][$vars['options']['embededcode_field']]->field_alias;

  foreach ($vars['rows'] as $num => $row) {
    $vars['first_embedcode'] = ($vars['first_embedcode'])? $vars['first_embedcode']: $view->result[$num]->$pheww;
    $vars['elements'] .= " <span class='ooyala_shared_player_row' id='" . $vars['player_id'] ."-$num' > $row </span><!-- fin de sharedplayerrow --> ";
    $embeded_codes[$num] = $view->result[$num]->$pheww;
  }

  drupal_add_js(array('ooyalaSharedPlayerCodes' => $embeded_codes), 'setting', 'header');
  drupal_add_js(array('ooyalaSharedPlayer' => $vars['player_id']), 'setting', 'header');
  drupal_add_js(drupal_get_path('module', 'ooyala') . "/ooyala_sharedplayer.js", 'module', 'footer');
}

/**
 * Helper function to generate a thumbnail URL from an Ooyala video code.
 */
function ooyala_get_thumbnail_url($embedcode, $preset = NULL, $return_path = FALSE) {
  $directory = file_create_path(variable_get('ooyala_thumbnail_path', 'ooyalathumbs'));
  _ooyala_check_directory($directory);
  $path = $directory . '/' . $embedcode . '.jpg';

  if ($return_path) {
    return $path;
  }
  $cpath = $path;
  if (is_file($cpath)) {
    if ($preset) {
      $return = imagecache_create_url($preset, $path);
    }
    else {
      $return = file_create_url($path);
    }
  }
  else {
    // Save this embeded code to download the thumbnail on next cron run.
    $thumbnails_to_get = variable_get('ooyala_pending_thumbnails', array());

    if ($embedcode && !isset($thumbnails_to_get[$embedcode])) {
      $thumbnails_to_get[$embedcode] = $embedcode;
      variable_set('ooyala_pending_thumbnails', $thumbnails_to_get);
      drupal_set_message(t('The thumbnail will be downloaded from Ooyala in the next Cron run'), 'status');
    }

    $default_path = variable_get('ooyala_default_thumbnail_path', FALSE);
    // Set a default thumbnail path if configured. If there isn't a default
    // the user will get a broken image at the path until it's downloaded.
    if ($default_path && !$return_path) {
      $path = $default_path;
    }

    if ($preset) {
      $return = imagecache_create_url($preset, $path);
    }
    else {
      $return = file_create_url($path);
    }
  }
  return $return;
}

/**
 * Utility function to check that a directory is created and writtable.
 *
 * @param $path
 *   A directory path to be checked inside the Drupal file root.
 */
function _ooyala_check_directory($path) {
  if (!is_dir($path)) {
    // The third parameter is for recursive (PHP 5 only).
    return mkdir($path, 0775, TRUE);
  }
  if (is_dir($path) && !is_writable($path)) {
    return @chmod($path, 0775);
  }
  return TRUE;
}

/**
 * Utility function to print a simple ooyala player for use with the thickbox functionality
 *
 * @param $embedcode
 *  The embed code of the video to show in the player
 */

function ooyala_thickbox_player_page($embedcode) {
  print ooyala_player($embedcode, 'ooyala_thickbox_player' ,NULL,NULL, variable_get('ooyala_thickbox_autoplay', true) );
}

/**
 * Utility function for eliminating the need to have the "text" module activated
 *
 */

if(!function_exists('_text_allowed_values')) {
  function _text_allowed_values($element) {
    $field = content_fields($element['#field_name'], $element['#type_name']);
    if (($allowed_values = content_allowed_values($field)) && isset($allowed_values[$element['#item']['value']])) {
      return $allowed_values[$element['#item']['value']];
    }
  }
}